// index.js

import React, { useRef } from 'react'
import Head from 'next/head'
import { setCookie } from 'cookies-next';
import { useRouter } from 'next/router';
import localeNames from '@/data/localeNames';
import fetchPage from '@/lib/fetchPage';

export default function Home({ page }) {
  const router = useRouter();

  const handleLocaleChange = (event) => {
    const locale = event.target.value;
    setCookie('NEXT_LOCALE', locale, { path: '/' });
    const { pathname, asPath, query } = router;
    router.push({ pathname, query }, asPath, { locale });
  }

  const Paragraphs = () => {
    const pars = [];
    for (const k in page) {
      if (k.match(/^par/)) {
        pars.push(<p className="text-lg mb-6 text-justify">{page[k]}</p>)
      }
    }
    return pars;
  }

  return (
    <>
      <Head>
        <title>{page.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-slate-900 h-screen flex flex-col text-white">
        <div className="w-full md:w-[1200px] bg-slate-800 mx-auto md:px-10 md:py-10">
          <h1 className="font-bold text-2xl mb-6">{page.title}</h1>
          <div className="p-4 border-2 border-gray-400 rounded-md relative flex w-full mb-6">
            <select
              className="focus:outline-none w-full bg-transparent text-blue-200 [&>*]:bg-slate-700"
              name="locale"
              placeholder="Select Language"
              onChange={handleLocaleChange}
            >
              <option disabled="">** Select Language **</option>
              {
                localeNames.map((l) => (
                  <option key={l.value} value={l.value}>{l.name}</option>
                ))
              }
            </select>
          </div>
          <Paragraphs />
        </div>
      </div>
    </>
  )
}

export async function getStaticProps(props) {
  const { locale, locales, defaultLocale } = props;

  const page = await fetchPage('home-page', locale);

  return {
    props: {
      locale,
      locales,
      defaultLocale,
      page
    },
    revalidate: 10
  }
}